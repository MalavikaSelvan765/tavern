load("@rules_python//python:defs.bzl", "py_library")
load("@tavern_pip//:requirements.bzl", "requirement")

exports_files(["pytest.ini"])

py_library(
    name = "tavern",
    srcs = ["docs/source/conf.py"],
    visibility = ["//visibility:public"],
    deps = [
        "@tavern_pip//pypi__recommonmark",
        "@tavern_pip//pypi__sphinx_rtd_theme",
    ],
)

load("@rules_python//python:packaging.bzl", "py_wheel")

py_wheel(
    name = "tavern_wheel",
    author = "Michael Boulton",
    classifiers = [
        "Development Status :: 5 - Production/Stable",
        "Intended Audience :: Developers",
        "Framework :: Pytest",
        "Programming Language :: Python :: 3",
        "Programming Language :: Python :: 3.7",
        "Programming Language :: Python :: 3.8",
        "Programming Language :: Python :: 3.9",
        "Topic :: Utilities",
        "Topic :: Software Development :: Testing",
        "License :: OSI Approved :: MIT License",
    ],
    console_scripts = {"tavern-ci": "tavern.entry:main"},
    description_file = "README.rst",
    distribution = "tavern",
    entry_points = {
        "console_scripts": ["tavern-ci = tavern.entry:main"],
        "pytest11": ["tavern = tavern.testutils.pytesthook"],
        "tavern_http": ["requests = tavern._plugins.rest.tavernhook:TavernRestPlugin"],
        "tavern_mqtt": ["paho-mqtt = tavern._plugins.mqtt.tavernhook"],
    },
    homepage = "https://taverntesting.github.io/",
    license = "MIT",
    python_tag = "py3",
    version = "1.11.1",
    visibility = ["//visibility:public"],
    deps = [
        ":tavern",
    ],
)

# gazelle:lang py
# gazelle:exclude bazel-*
# gazelle:exclude build
# gazelle:exclude dist
# gazelle:exclude example
# gazelle:exclude .git
# gazelle:exclude .github
# gazelle:exclude .idea
# gazelle:exclude .ijwb
# gazelle:exclude .pytest_cache
# gazelle:exclude .run
# gazelle:exclude scripts
# gazelle:exclude tavern.egg-info
# gazelle:exclude .tox

load("@tavern_pip//:requirements.bzl", "all_whl_requirements")
load("@rules_python//gazelle/manifest:defs.bzl", "gazelle_python_manifest")
load("@rules_python//gazelle/modules_mapping:def.bzl", "modules_mapping")

# This rule fetches the metadata for python packages we depend on. That data is
# required for the gazelle_python_manifest rule to update our manifest file.
modules_mapping(
    name = "modules_map",
    wheels = all_whl_requirements,
)

# Gazelle python extension needs a manifest file mapping from
# an import to the installed package that provides it.
# This macro produces two targets:
# - //:gazelle_python_manifest.update can be used with `bazel run`
#   to recalculate the manifest
# - //:gazelle_python_manifest.test is a test target ensuring that
#   the manifest doesn't need to be updated
gazelle_python_manifest(
    name = "gazelle_python_manifest",
    modules_mapping = ":modules_map",
    # This is what we called our `pip_install` rule, where third-party
    # python libraries are loaded in BUILD files.
    pip_repository_name = "tavern_pip",
    # When using pip_parse instead of pip_install, set the following.
    # pip_repository_incremental = True,
    # This should point to wherever we declare our python dependencies
    # (the same as what we passed to the modules_mapping rule in WORKSPACE)
    requirements = "//:requirements_lock.txt",
)

load("@bazel_gazelle//:def.bzl", "gazelle")
load("@rules_python//gazelle:def.bzl", "GAZELLE_PYTHON_RUNTIME_DEPS")

gazelle(
    name = "gazelle",
    data = GAZELLE_PYTHON_RUNTIME_DEPS,
    gazelle = "@rules_python//gazelle:gazelle_python_binary",
)
